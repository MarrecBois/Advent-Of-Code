import math
import itertools
data = """
..................................w...............
..................................................
.....................................C............
......................................3...........
.............b.......u.........w...........3......
...........................u......................
...8........K...........u.......y.........I.......
..................................P5........B.....
...U................2.P...............B...C.......
............i......x.P........w......s.C......IB5.
..............t....................y....x.........
.......8............K....1.......w............u...
.................i.............r.........s........
..2.............t..T.K.......r......8..........I..
8..............t..T.....r...................5.....
...2........................1....M.t...N....x.....
...V....U.......................N.S..........I....
.........W...i............O....v............S.....
................L...1...s.fT.....x............3...
....6.......C...N.........Tf.3....................
...6.......F..........V..........k...N......H.....
...................U..f........0......H.y.........
.......................O...P......0...............
.......L..U....m.......R............s.............
6...i.................O....0.2.........H.....B....
........................R......H.........S........
......F.....c..........m..............d...........
................F.L.....m..................7......
.............J.........................S..........
.b....j.k..............V0.........................
.................L.....K..........................
.......F.......J..............r.....M.............
......................m1....a.R...7...............
.......4......Y..6.D..............................
k............9.......D................M...........
.....Xb.................V...h.....................
A.........9.Xl..........D......R..................
4.............c..d........D.............7.........
.A.4.............c.............M.7.v..............
..........n.9........................h............
...j....bd.........f.....p..W.....................
.............k.........p..........................
.......W4.......p......X.....5..J.....v...........
........W.d..c......A........n..v.....o...........
..........l.....n..........o......Y...h...........
.....A............................................
..j..........n....................................
a9.lX..................Y...........o..............
.......a.................Y..........o.............
...a....l.......................p................."""

data = data.splitlines()
data = [list(i) for i in data]
mapping = {}
bounds = len(data[0])
for i in range(len(data)):
    for j in range(len(data[0])):
        mapping[(i, j)] = data[i][j]

if len(data[0]) != len(data):
    print("Area Not a Square! Tread with caution!")

antennaInfo = {}
for i in range(len(data)):
    for j in range(len(data[0])):
        if mapping[(i, j)] != ".":
            if mapping[(i, j)] not in antennaInfo:
                antennaInfo[mapping[(i, j)]] = [(i, j)]
            else:
                antennaInfo[mapping[(i, j)]].append((i, j))

locations = []
for key in antennaInfo:
    for pair in itertools.product(antennaInfo[key], repeat=2):
        if pair[0] != pair[1]:
            dX = pair[1][0] - pair[0][0]
            dY = pair[1][1] - pair[0][1]
            antinode0 = (pair[0][0]-dX, pair[0][1]-dY)
            if antinode0[0] >= 0 and antinode0[0] < bounds and antinode0[1] >= 0 and antinode0[1] < bounds:
                if antinode0 not in locations:
                    locations.append(antinode0)
            antinode1 = (pair[1][0]+dX, pair[1][1]+dY)
            if antinode1[0] >= 0 and antinode1[0] < bounds and antinode1[1] >= 0 and antinode1[1] < bounds:
                if antinode1 not in locations:
                    locations.append(antinode1)
print(f"Part 1 answer: {len(locations)}")

locations = []
for key in antennaInfo:
    for pair in itertools.product(antennaInfo[key], repeat=2):
        if pair[0] != pair[1]:
            dX = pair[1][0] - pair[0][0]
            dY = pair[1][1] - pair[0][1]
            if pair[0] not in locations:
                locations.append(pair[0])
            if pair[1] not in locations:
                locations.append(pair[1])
            if dX == 0:
                for i in range(len(bounds)):
                    if (i, pair[0][0]) not in locations:
                        locations.append((i, pair[0][0]))
            if dY == 0:
                for i in range(len(bounds)):
                    if (i, pair[0][1]) not in locations:
                        locations.append((i, pair[0][1]))
            if math.gcd(dX, dY) != 0:
                gcd = math.gcd(dX, dY)
                dX = dX / gcd
                dY = dY / gcd
            antinode0 = (pair[0][0]-dX, pair[0][1]-dY)
            while antinode0[0] >= 0 and antinode0[0] < bounds and antinode0[1] >= 0 and antinode0[1] < bounds:
                if antinode0 not in locations:
                    locations.append(antinode0)
                antinode0 = (antinode0[0]-dX, antinode0[1]-dY)
            antinode1 = (pair[0][0]+dX, pair[0][1]+dY)
            while antinode1[0] >= 0 and antinode1[0] < bounds and antinode1[1] >= 0 and antinode1[1] < bounds:
                if antinode1 not in locations:
                    locations.append(antinode1)
                antinode1 = (antinode1[0]+dX, antinode1[1]+dY)

print(f"Part 2 answer: {len(locations)}")